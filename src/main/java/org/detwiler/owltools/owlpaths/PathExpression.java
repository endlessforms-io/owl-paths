/* PathExpression.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. PathExpression.java */
package org.detwiler.owltools.owlpaths;
import java.io.*;
import org.detwiler.owltools.owlpaths.util.PathNode;
import org.detwiler.owltools.owlpaths.util.PathExpressionElementVisitor;
import org.detwiler.owltools.owlpaths.util.Qualifiers;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.reasoner.NodeSet;
import org.semanticweb.owlapi.reasoner.OWLReasoner;
import org.semanticweb.owlapi.search.EntitySearcher;
import java.nio.charset.Charset;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
public class PathExpression/*@bgen(jjtree)*/implements PathExpressionTreeConstants, PathExpressionConstants {/*@bgen(jjtree)*/
  protected JJTPathExpressionState jjtree = new JJTPathExpressionState();private OWLReasoner reasoner;
    private Pattern invPattern = Pattern.compile("^\\[INV=(.*)\\]$");
    private Pattern supPattern = Pattern.compile("^\\[SUP=(.*)\\]$");

    public PathExpression(OWLReasoner reasoner){
        this.reasoner = reasoner;
    }

    public Set<OWLClassExpression> processPath(String pathExpr, Set<OWLClassExpression> subjClses){
        Set<OWLClassExpression> results = new HashSet<OWLClassExpression>();

        // feed expression to this object
        SimpleCharStream charstream = new SimpleCharStream(new StringReader(pathExpr));
        PathExpressionTokenManager petm = new PathExpressionTokenManager(charstream);
        this.ReInit(petm);

        try {
          PathNode start = this.Start();
          //start.dump("");
          results = (Set<OWLClassExpression>)start.jjtAccept(new PathExpressionElementVisitor(reasoner),subjClses);
        } catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
        }

        return results;
    }

    public static void main(String[] args) {
        ByteArrayInputStream str = new ByteArrayInputStream(args[0].getBytes());
        PathExpression t = new PathExpression(str);
        try {
          PathNode n = t.Start();
          //System.out.println(n.jjtAccept(new PathExpressionDefaultVisitor(),null));
          n.dump("");
          System.out.println("Thank you.");
        } catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
        }
    }

  final public PathNode Start() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
}

  final public void Expr() throws ParseException {
    BinaryOpExpr();
}

  final public void BinaryOpExpr() throws ParseException {/*@bgen(jjtree) BinaryOpExpr */
                         ASTBinaryOpExpr jjtn000 = new ASTBinaryOpExpr(JJTBINARYOPEXPR);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      UnaryOpExpr();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONCAT:
      case ALT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONCAT:{
          t = jj_consume_token(CONCAT);
          break;
          }
        case ALT:{
          t = jj_consume_token(ALT);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        BinaryOpExpr();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
if(t!=null)
                {
                        jjtn000.setOperatorType(t.kind);
                        jjtn000.setOperator(t.image);
                }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void PropertyExpr() throws ParseException {/*@bgen(jjtree) PropertyExpr */
                       ASTPropertyExpr jjtn000 = new ASTPropertyExpr(JJTPROPERTYEXPR);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t=null, i=null, s=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FULL_URI:{
        FullIRIExpr();
        break;
        }
      case PREFIX_URI:{
        PrefixIRIExpr();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INV_FILTER:{
        i = jj_consume_token(INV_FILTER);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUP_FILTER:{
        s = jj_consume_token(SUP_FILTER);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
//System.err.println(t.kind);
        if(i!=null)
        {
            String invQualExp = i.image;
            String invPropIRI = null;
            if(invQualExp!=null) {
                Matcher invMatcher = invPattern.matcher(invQualExp);
                if (invMatcher.find()) {
                    invPropIRI = invMatcher.group(1);
                    System.err.println("found inverse qualifier " + invPropIRI);
                }
            }
            ((PathNode)jjtn000.jjtGetChild(0)).getQualifiers().setQualifier(Qualifiers.QualType.INV, invPropIRI);
        }
        if(s!=null)
        {
            String supQualExp = s.image;
            String supClassIRI = null;
            if(supQualExp!=null) {
                Matcher supMatcher = supPattern.matcher(supQualExp);
                if (supMatcher.find()) {
                    supClassIRI = supMatcher.group(1);
                    System.err.println("found superclass qualifier " + supClassIRI);
                }
            }
            ((PathNode)jjtn000.jjtGetChild(0)).getQualifiers().setQualifier(Qualifiers.QualType.SUP, supClassIRI);
        }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void FullIRIExpr() throws ParseException {/*@bgen(jjtree) FullIRIExpr */
                       ASTFullIRIExpr jjtn000 = new ASTFullIRIExpr(JJTFULLIRIEXPR);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      t = jj_consume_token(FULL_URI);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
String trimmedIRIExpr = t.image.replaceAll("[<>]","");
        IRI propertyIRI = IRI.create(trimmedIRIExpr);
        if(propertyIRI.isIRI()){
         //System.err.println(propertyIRI+" is an IRI");
         jjtn000.setOperator(trimmedIRIExpr);
        }
        else {
         System.err.println(propertyIRI+" is NOT an IRI");
        }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void PrefixIRIExpr() throws ParseException {/*@bgen(jjtree) PrefixIRIExpr */
                         ASTPrefixIRIExpr jjtn000 = new ASTPrefixIRIExpr(JJTPREFIXIRIEXPR);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      t = jj_consume_token(PREFIX_URI);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
IRI propertyIRI = IRI.create(t.image);
        if(propertyIRI.isIRI()){
         //System.err.println(propertyIRI+" is an IRI");
         jjtn000.setOperator(t.image);
        }
        else {
         System.err.println(propertyIRI+" is NOT an IRI");
        }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void UnaryOpExpr() throws ParseException {/*@bgen(jjtree) UnaryOpExpr */
                        ASTUnaryOpExpr jjtn000 = new ASTUnaryOpExpr(JJTUNARYOPEXPR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      SubExpr();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case PLUS:
      case OPT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:{
          t = jj_consume_token(STAR);
          break;
          }
        case PLUS:{
          t = jj_consume_token(PLUS);
          break;
          }
        case OPT:{
          t = jj_consume_token(OPT);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
if(t!=null)
                {
                        jjtn000.setOperatorType(t.kind);
                        jjtn000.setOperator(t.image);
                }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void SubExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FULL_URI:
    case PREFIX_URI:{
      PropertyExpr();
      break;
      }
    case LGROUP:{
      jj_consume_token(LGROUP);
      Expr();
      jj_consume_token(RGROUP);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public PathExpressionTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xc00,0xc00,0x300000,0x10000,0x8000,0x7000,0x7000,0x300020,};
	}

  /** Constructor with InputStream. */
  public PathExpression(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PathExpression(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new PathExpressionTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PathExpression(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new PathExpressionTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new PathExpressionTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PathExpression(PathExpressionTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PathExpressionTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[22];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 8; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 22; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
