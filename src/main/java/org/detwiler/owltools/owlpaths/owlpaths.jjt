options {
    IGNORE_CASE = false;
    MULTI = true;
    STATIC=false;
    UNICODE_INPUT=true;
    NODE_CLASS = "org.detwiler.owltools.owlpaths.util.PathNode";
    VISITOR = true;
}

PARSER_BEGIN(PathExpression)
package org.detwiler.owltools.owlpaths;
import java.io.*;
import org.detwiler.owltools.owlpaths.util.PathNode;
import org.detwiler.owltools.owlpaths.util.PathExpressionElementVisitor;
import org.detwiler.owltools.owlpaths.util.Qualifiers;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.reasoner.NodeSet;
import org.semanticweb.owlapi.reasoner.OWLReasoner;
import org.semanticweb.owlapi.search.EntitySearcher;
import java.nio.charset.Charset;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
public class PathExpression {
    private OWLReasoner reasoner;
    private Pattern invPattern = Pattern.compile("^\\[INV=(.*)\\]$");
    private Pattern supPattern = Pattern.compile("^\\[SUP=(.*)\\]$");

    public PathExpression(OWLReasoner reasoner){
        this.reasoner = reasoner;
    }

    public Set<OWLClassExpression> processPath(String pathExpr, Set<OWLClassExpression> subjClses){
        Set<OWLClassExpression> results = new HashSet<OWLClassExpression>();

        // feed expression to this object
        SimpleCharStream charstream = new SimpleCharStream(new StringReader(pathExpr));
        PathExpressionTokenManager petm = new PathExpressionTokenManager(charstream);
        this.ReInit(petm);

        try {
          PathNode start = this.Start();
          //start.dump("");
          results = (Set<OWLClassExpression>)start.jjtAccept(new PathExpressionElementVisitor(reasoner),subjClses);
        } catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
        }

        return results;
    }

    public static void main(String[] args) {
        ByteArrayInputStream str = new ByteArrayInputStream(args[0].getBytes());
        PathExpression t = new PathExpression(str);
        try {
          PathNode n = t.Start();
          //System.out.println(n.jjtAccept(new PathExpressionDefaultVisitor(),null));
          n.dump("");
          System.out.println("Thank you.");
        } catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
        }
    }

}

PARSER_END(PathExpression)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < LGROUP: "(" >
| < RGROUP: ")" >
| < LANGLE: "<" >
| < RANGLE: ">" >
| < COLON: ":" >
| < CONCAT: "/" >
| < ALT: "|" >
| < STAR: "*" >
| < PLUS: "+" >
| < OPT: "?" >
| < SUP_FILTER: "[SUP="(<URI_CHAR>)+"]" >
| < INV_FILTER: "[INV="<PREFIX_URI>"]" >
| < #URI_CHAR: ["A"-"Z","a"-"z","_","-","0"-"9",":","/"] | <URI_SPECIAL_CHAR> > //TODO add URI chars, create full_uri and prefix_uri
| < #URI_SPECIAL_CHAR: ["-",".","_","~",":","/","?","#","@","!","$","&","'","(",")","*","+",",",";","="] >
| < #PREF_URI_CHAR: ~["(",")","<",">","[","]",":","/","|","*","+","?"] >
| < FULL_URI: <LANGLE>(<URI_CHAR>)+<RANGLE> >
| < PREFIX_URI: (<PREF_URI_CHAR>)+<COLON>(<PREF_URI_CHAR>)+ >
}

PathNode Start() : {}
{
  	Expr()
  	{ return jjtThis; }
}


void Expr() #void : {}
{
  	BinaryOpExpr()
}

void BinaryOpExpr()  : { Token t = null; }
{
	UnaryOpExpr() ((t=<CONCAT>|t=<ALT>) BinaryOpExpr())?
	{
		if(t!=null)
		{
			jjtThis.setOperatorType(t.kind);
			jjtThis.setOperator(t.image);
		}
	}
}

void PropertyExpr(): { Token t=null, i=null, s=null; }
{
    (FullIRIExpr()|PrefixIRIExpr())(i=<INV_FILTER>)?(s=<SUP_FILTER>)?
    {
        //System.err.println(t.kind);
        if(i!=null)
        {
            String invQualExp = i.image;
            String invPropIRI = null;
            if(invQualExp!=null) {
                Matcher invMatcher = invPattern.matcher(invQualExp);
                if (invMatcher.find()) {
                    invPropIRI = invMatcher.group(1);
                    System.err.println("found inverse qualifier " + invPropIRI);
                }
            }
            ((PathNode)jjtThis.jjtGetChild(0)).getQualifiers().setQualifier(Qualifiers.QualType.INV, invPropIRI);
        }
        if(s!=null)
        {
            String supQualExp = s.image;
            String supClassIRI = null;
            if(supQualExp!=null) {
                Matcher supMatcher = supPattern.matcher(supQualExp);
                if (supMatcher.find()) {
                    supClassIRI = supMatcher.group(1);
                    System.err.println("found superclass qualifier " + supClassIRI);
                }
            }
            ((PathNode)jjtThis.jjtGetChild(0)).getQualifiers().setQualifier(Qualifiers.QualType.SUP, supClassIRI);
        }
    }
}

void FullIRIExpr() : { Token t=null; }
{
    (t=<FULL_URI>)
    {
        String trimmedIRIExpr = t.image.replaceAll("[<>]","");
        IRI propertyIRI = IRI.create(trimmedIRIExpr);
        if(propertyIRI.isIRI()){
         //System.err.println(propertyIRI+" is an IRI");
         jjtThis.setOperator(trimmedIRIExpr);
        }
        else {
         System.err.println(propertyIRI+" is NOT an IRI");
        }
    }
}

void PrefixIRIExpr() : { Token t=null; }
{
    (t=<PREFIX_URI>)
    {
        IRI propertyIRI = IRI.create(t.image);
        if(propertyIRI.isIRI()){
         //System.err.println(propertyIRI+" is an IRI");
         jjtThis.setOperator(t.image);
        }
        else {
         System.err.println(propertyIRI+" is NOT an IRI");
        }
    }
}

void UnaryOpExpr()  : { Token t = null; }
{
	SubExpr() (t=<STAR>|t=<PLUS>|t=<OPT>)? //#UnaryOpExpr(>1)
	{
		if(t!=null)
		{
			jjtThis.setOperatorType(t.kind);
			jjtThis.setOperator(t.image);
		}
	}
}

void SubExpr() #void : {}
{
  	PropertyExpr() | (<LGROUP>Expr()<RGROUP>)
}