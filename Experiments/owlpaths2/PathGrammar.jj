/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. PathGrammar.jj */
/*@egen*/options {
    IGNORE_CASE = false;
                 
    STATIC=false;
    UNICODE_INPUT=true;
                                                                 
    LOOKAHEAD = 3;
    FORCE_LA_CHECK = true;
                   
}

PARSER_BEGIN(PathExpression)

/**
 * An OWLPaths path expression parser.
 */
package org.detwiler.owltools.owlpaths2;
import java.io.*;
import org.detwiler.owltools.owlpaths2.util.PathNode;
public class PathExpression/*@bgen(jjtree)*/implements PathExpressionTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTPathExpressionState jjtree = new JJTPathExpressionState();

/*@egen*/

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    PathExpression t = new PathExpression(System.in);
    try {
      PathNode n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(PathExpression)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < LGROUP: "(" >
| < RGROUP: ")" >
| < LANGLE: "<" >
| < RANGLE: ">" >
| < COLON: ":" >
| < CONCAT: "/" >
| < ALT: "|" >
| < STAR: "*" >
| < PLUS: "+" >
| < OPT: "?" >
| < PROPERTY: (<URI_CHAR>)+ >
| < SUP_FILTER: "[SUP="(<URI_CHAR>)+"]" >
| < INV_FILTER: "[INV="(<URI_CHAR>)+"]" >
| < URI_CHAR: ["A"-"Z","a"-"z","_","-","0"-"9",":","/"] > //TODO add URI chars, create full_uri and prefix_uri
| < URI: "<"(<URI_CHAR>)+">" >
}

PathNode Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
  	OWLPathsExpr()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void OWLPathsExpr()       : {}
{
  	PropertyPath()
        //| InversePath()
        | SequencePath()
        | AlternativePath()
        | ZeroOrMorePath()
        | OneOrMorePath()
        | ZeroOrOnePath()
        //| NegatedPropertySetPath()
}

void PropertyPath() : {/*@bgen(jjtree) PropertyPath */
  ASTPropertyPath jjtn000 = new ASTPropertyPath(JJTPROPERTYPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PropertyPath */
    try {
/*@egen*/
    IRIref()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
InversePath:
    '^' PropertyPath

 */

void SequencePath() : {/*@bgen(jjtree) SequencePath */
  ASTSequencePath jjtn000 = new ASTSequencePath(JJTSEQUENCEPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SequencePath */
    try {
/*@egen*/
    PropertyPath() <CONCAT> PropertyPath()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AlternativePath() : {/*@bgen(jjtree) AlternativePath */
  ASTAlternativePath jjtn000 = new ASTAlternativePath(JJTALTERNATIVEPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AlternativePath */
    try {
/*@egen*/
    PropertyPath() <ALT> PropertyPath()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ZeroOrMorePath() : {/*@bgen(jjtree) ZeroOrMorePath */
                         ASTZeroOrMorePath jjtn000 = new ASTZeroOrMorePath(JJTZEROORMOREPATH);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ZeroOrMorePath */
    try {
/*@egen*/
    PropertyPath() (t=<STAR>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.jjtSetValue(t.image);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OneOrMorePath() : {/*@bgen(jjtree) OneOrMorePath */
  ASTOneOrMorePath jjtn000 = new ASTOneOrMorePath(JJTONEORMOREPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OneOrMorePath */
    try {
/*@egen*/
    PropertyPath() <PLUS>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ZeroOrOnePath() : {/*@bgen(jjtree) ZeroOrOnePath */
  ASTZeroOrOnePath jjtn000 = new ASTZeroOrOnePath(JJTZEROORONEPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ZeroOrOnePath */
    try {
/*@egen*/
    PropertyPath() <OPT>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IRIref() : {/*@bgen(jjtree) IRIref */
                 ASTIRIref jjtn000 = new ASTIRIref(JJTIRIREF);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) IRIref */
  try {
/*@egen*/
  t=<URI>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}